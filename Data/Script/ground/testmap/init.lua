--[[
    init.lua
    Created: 02/06/2021 17:32:04
    Description: Autogenerated script file for the map testmap.
]]--
-- Commonly included lua functions and data
require 'common'
require 'PartnerEssentials'
require 'mission_gen'

SV.ChapterProgression.Chapter = 3
GAME:UnlockDungeon("crooked_cavern")
GAME:UnlockDungeon("illuminant_riverbed")

-- Package name
local testmap = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = MapStrings['SomeStringName']
local MapStrings = {}

-------------------------------
-- Map Callbacks
-------------------------------
---testmap.Init
--Engine callback function
function testmap.Init(map, time)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  MapStrings = COMMON.AutoLoadLocalizedStrings()
  
  --local chara = CH('Teammate1')
	--AI:SetCharacterAI(chara, "ai.ground_partner", CH('PLAYER'), chara.Position)
   -- chara.CollisionDisabled = true
	
	--GROUND:AddMapStatus("darkness")

end

---testmap.Enter
--Engine callback function
function testmap.Enter(map, time)

end

---testmap.Update
--Engine callback function
function testmap.Update(map, time)


end




-------------------------------
-- Entities Callbacks
-------------------------------


function testmap.Make_Missions_Action(chara, activator)
	print("Running mission generation!")
	MISSION_GEN.ResetBoards()
	MISSION_GEN.GenerateBoard("Mission")
	MISSION_GEN.GenerateBoard("Outlaw")
	MISSION_GEN.SortMission()
	MISSION_GEN.SortOutlaw()
end

function testmap.See_Taken_Action(chara, activator)
	UI:ResetSpeaker()
	UI:SetAutoFinish(true)
	for i = 1, 8, 1 do
		UI:WaitShowDialogue("Job " .. tostring(i) .. ": Client: " .. SV.TakenBoard[i].Client .. " Target: " .. SV.TakenBoard[i].Target ..
			" Zone: " .. SV.TakenBoard[i].Zone .. " Reward: " .. SV.TakenBoard[i].Reward .. " Floor: " .. SV.TakenBoard[i].Floor .. " Type: "
			.. SV.TakenBoard[i].Type .. " Completion: " .. SV.TakenBoard[i].Completion .. " Taken: " .. tostring(SV.TakenBoard[i].Taken) .. " Difficulty: " .. SV.TakenBoard[i].Difficulty)			
	end
	UI:SetAutoFinish(false)
end


function testmap.See_Mission_Action(chara, activator)
	UI:ResetSpeaker()
	UI:SetAutoFinish(true)
	for i = 1, 8, 1 do
		UI:WaitShowDialogue("Job " .. tostring(i) .. ": Client: " .. SV.MissionBoard[i].Client .. " Target: " .. SV.MissionBoard[i].Target ..
			" Zone: " .. SV.MissionBoard[i].Zone .. " Reward: " .. SV.MissionBoard[i].Reward .. " Floor: " .. SV.MissionBoard[i].Floor .. " Type: "
			.. SV.MissionBoard[i].Type .. " Completion: " .. SV.MissionBoard[i].Completion .. " Taken: " .. tostring(SV.MissionBoard[i].Taken) .. " Difficulty: " .. SV.MissionBoard[i].Difficulty)			
	end
	UI:SetAutoFinish(false)
end

function testmap.See_Outlaw_Action(chara, activator)
	UI:ResetSpeaker()
	UI:SetAutoFinish(true)
	for i = 1, 8, 1 do
		UI:WaitShowDialogue("Job " .. tostring(i) .. ": Client: " .. SV.OutlawBoard[i].Client .. " Target: " .. SV.OutlawBoard[i].Target ..
			" Zone: " .. SV.OutlawBoard[i].Zone .. " Reward: " .. SV.OutlawBoard[i].Reward .. " Floor: " .. SV.OutlawBoard[i].Floor .. " Type: "
			.. SV.OutlawBoard[i].Type .. " Completion: " .. SV.OutlawBoard[i].Completion .. " Taken: " .. tostring(SV.OutlawBoard[i].Taken) .. " Difficulty: " .. SV.OutlawBoard[i].Difficulty)			
	end
	UI:SetAutoFinish(false)
end


function testmap.See_Job_1_Menu_Action(chara, activator)
  local menu = JobMenu:new("mission", 1)
  UI:SetCustomMenu(menu.menu)
  UI:WaitForChoice()
end

function testmap.See_Mission_Board_Action(chara, activator)
  local menu = BoardMenu:new("mission")
  UI:SetCustomMenu(menu.menu)
  UI:WaitForChoice()
end


function testmap.See_Outlaw_Board_Action(chara, activator)
  local menu = BoardMenu:new("outlaw")
  UI:SetCustomMenu(menu.menu)
  UI:WaitForChoice()
end


function testmap.See_Taken_Board_Action(chara, activator)
  local menu = BoardMenu:new("taken")
  UI:SetCustomMenu(menu.menu)
  UI:WaitForChoice()
end



function testmap.Teammate1_Action(chara, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  COMMON.GroundInteract(activator, chara, true)
end



function testmap.Get_Released_Mons_Action()
	--mons is a list of all species index strings
	--local mons = _DATA.DataIndices[RogueEssence.Data.DataManager.DataType.Monster]:GetOrderedKeys(false)
	--for i = 1, 906, 1 do
	--	if _DATA:GetMonster(mons[i]).Released then
	--		print(mons[i]) 
	--	 end
	--end
	
	--mons is a list of all species index strings
	local mons = _DATA.DataIndices[RogueEssence.Data.DataManager.DataType.Item]:GetOrderedKeys(false)
	for i = 1, 2000, 1 do
		if _DATA:GetItem(mons[i]).ItemData.UsageType == _DATA:GetItem("tm_acrobatics").ItemData.UsageType then
			print(mons[i]) 
		 end
	end
end

--[[
potential sfx:
EVT_EP_Aegis_Cave_Marker_Glow
EVT_EP_Palkia_Transport
_UNK_EVT_106
_UNK_EVT_079 (TIME GEAR TAKE DOWN)

]]--
function testmap.Test_Core_Deactivation_Action(chara, activator)
	GAME:CutsceneMode(true)
	SOUND:StopBGM()
	
	GAME:MoveCamera(688, 936, 1, false)
	
	local root = RogueEssence.Ground.GroundObject(RogueEssence.Content.ObjAnimData("Anima_Root", 1), --anim data. Don't set that number to 0 for valid anims
								 				 RogueElements.Rect(600, 864, 16, 16),--xy coords, then size
								  				 RogueElements.Loc(0, 0), --offset
												 true, 
												 "Anima_Root")--object entity name	
												 
	root:ReloadEvents()
	GAME:GetCurrentGround():AddTempObject(root)
	
	local core = RogueEssence.Ground.GroundObject(RogueEssence.Content.ObjAnimData("Anima_Core", 1), --anim data. Don't set that number to 0 for valid anims
								 				 RogueElements.Rect(600, 865, 16, 16),--xy coords, then size
								  				 RogueElements.Loc(0, -1), --offset
												 true, 
												 "Anima_Core")--object entity name	
				
	core:ReloadEvents()
	GAME:GetCurrentGround():AddTempObject(core)
	
	GROUND:ObjectSetDefaultAnim(root, 'Anima_Root', 10, 0, 15, Direction.Down)
	GROUND:ObjectSetDefaultAnim(core, 'Anima_Core', 10, 0, 31, Direction.Down)

	SOUND:LoopBattleSE('_UNK_EVT_106')
	GAME:WaitFrames(180)
	SOUND:FadeOutBattleSE('_UNK_EVT_106', 60)
	GAME:WaitFrames(60)
	
	SOUND:PlayBattleSE('EVT_EP_Nightmare_Break')
	GROUND:ObjectSetDefaultAnim(core, 'Core_Deactivation', 0, 0, 0, Direction.Down)

	GROUND:ObjectSetAnim(core, 10, 0, 11, Direction.Down, 1)
	GROUND:ObjectSetDefaultAnim(core, 'Core_Deactivation', 0, 11, 11, Direction.Down)
	
	GAME:WaitFrames(210)
	
	SOUND:PlayBattleSE("_UNK_EVT_079")
	GROUND:ObjectSetDefaultAnim(root, 'Anima_Root_Turnoff', 0, 0, 0, Direction.Down)

	GROUND:ObjectSetAnim(root, 40, 0, 7, Direction.Down, 1)
	GROUND:ObjectSetDefaultAnim(root, 'Anima_Root_Turnoff', 0, 7, 7, Direction.Down)
	
	GAME:WaitFrames(360)
	GAME:GetCurrentGround():RemoveTempObject(root)
	GAME:GetCurrentGround():RemoveTempObject(core)
	GAME:MoveCamera(0, 0, 1, true)
	GAME:CutsceneMode(false)
	SOUND:PlayBGM('Deep Dark Crater.ogg', true)
	GAME:GetCurrentGround():RemoveTempObject(groundObj)
end
	
	
	
												 
												 

return testmap

